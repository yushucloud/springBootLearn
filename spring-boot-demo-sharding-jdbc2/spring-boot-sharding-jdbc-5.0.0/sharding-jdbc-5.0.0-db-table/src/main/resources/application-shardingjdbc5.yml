spring:
  # 数据源配置
  shardingsphere:
    props:
      # 这里的其它属性，参考： https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-jdbc/configuration/props/
      # 打印 SQL
      sql-show: true
      # 在程序启动和更新时，是否检查重复表。
      check-duplicate-table-enabled: true
    # 数据源
    datasource:
      # 配置真实数据源
      names: ds0,ds1
      # 配置第 1 个数据源
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/demo_ds_2?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: root
        # =================================druid连接池配置相关的=================================
        # 初始连接数
        initialSize: 5
        # 最小连接池数量
        minIdle: 10
        # 最大连接池数量
        maxActive: 20
        # 配置获取连接等待超时的时间
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        # 配置一个连接在池中最大生存的时间，单位是毫秒
        maxEvictableIdleTimeMillis: 900000
        # 配置检测连接是否有效  Oracle: select 1 from dual    MySql: select 1
        validationQuery: SELECT 1
        # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        testWhileIdle: true
        # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        testOnBorrow: false
        # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        testOnReturn: false
        # =================================druid连接池配置相关的=================================
      # 配置第 2 个数据源
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/demo_ds_3?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: root
        # =================================druid连接池配置相关的=================================
        # 初始连接数
        initialSize: 5
        # 最小连接池数量
        minIdle: 10
        # 最大连接池数量
        maxActive: 20
        # 配置获取连接等待超时的时间
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        # 配置一个连接在池中最大生存的时间，单位是毫秒
        maxEvictableIdleTimeMillis: 900000
        # 配置检测连接是否有效  Oracle: select 1 from dual    MySql: select 1
        validationQuery: SELECT 1
        # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        testWhileIdle: true
        # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        testOnBorrow: false
        # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        testOnReturn: false
        # =================================druid连接池配置相关的=================================
    rules:
      sharding:
        # 绑定表规则列表,不配置也可以，若配置了，在tables下一定要配规则，否则直接启动报错
        binding-tables: t_goods,t_user
        # 分库默认分片策略(只对配置了分片规则的表生效)
        # 若未配置分片规则的表，会自动适配找到对应的数据源。
        # 若未配置分片规则的表，且多个数据源都存在，会以第一个为准。也可以配置check-duplicate-table-enabled在程序启动和更新时，是否检查重复表。重复则启动报错
        #（sharding-jdbc4.1及以前都要配置默认数据库,或对表指定对应数据库）
        default-database-strategy:
          # standard：标准，complex：复合分片，hint：行表达式 ，none：无
          standard:
            sharding-column: id
            sharding-algorithm-name: default-database-standard
        # 分表默认分片策略（配置与上面同理）
        default-table-strategy:
          # 不做任何操作
          none:
        # 配置默认自增主键生成器
        default-key-generate-strategy:
          #自增列名称，缺省表示不使用自增主键生成器
          column: id
          #自增列值生成器类型，可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
          key-generator-name: snowflake

        # 表规则配置
        tables:
          #具体表名-商品基本信息表
          t_goods:
            # 实际数据库节点,这里示例，2020年至于2023之间，按季度分表，格式 ds0.t_goods_2020_01_03...ds0.t_goods_2021_10_12...ds1.t_goods_2022_01_03..ds1.t_goods_2023_10_12
            actual-data-nodes: ds0.t_goods_$->{2020..2021}_$->{['01_03', '04_06', '07_09', '10_12']},ds1.t_goods_$->{2022..2023}_$->{['01_03', '04_06', '07_09', '10_12']}
            # 配置分库策略
            database-strategy:
              # standard：标准，complex：复合分片，hint：行表达式 ，none：无
              standard:
                # 分片字段
                sharding-column: create_time
                # 分片规则,在sharding-algorithms下配置
                sharding-algorithm-name: goods-database-custom
            # 配置分表策略,与database-strategy配置同理
            table-strategy:
              standard:
                sharding-column: create_time
                sharding-algorithm-name: goods-table-custom
            # 分布式序列算法，这里可以自己自定义配置，否则会走全局默认配置
            key-generate-strategy:
              #自增列名称，缺省表示不使用自增主键生成器
              column: id
              #自增列值生成器类型,这里使用自定义
              key-generator-name: CUSTOM-GENERATOR-KEY
          #具体表名-用户表
          t_user:
            # 实际数据库节点
            actual-data-nodes: ds$->{0..1}.t_user
            # 分表,分库策略，自增主键生成器缺失，会走默认配置

        # 配置 分片算法，可以是分库，也可以是分表
        sharding-algorithms:
          # 规则1
          default-database-standard:
            # 参考： https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/
            # 常见的： INLINE:行表达式分片算法, COMPLEX_INLINE:复合行表达式分片算法, HINT_INLINE:（Hint行表达式分片算法）,CLASS_BASED:自定义类分片算法
            type: INLINE
            props:
              # 注意，若分库分表字段相同，取模划分最好是不同的质数，避免不均匀散落
              algorithm-expression: ds$->{id % 2}
          # 规则2
          goods-database-custom:
            # 这里使用自定义规则
            type: CLASS_BASED
            props:
              # 分片策略类型，支持STANDARD、COMPLEX或HINT（不区分大小写）
              strategy: STANDARD
              # 类路径,在resources/META-INF/services中也要配置SPI
              algorithmClassName: com.example.config.sharding.algorithm.StandardModuloShardingDatabaseAlgorithm
          # 规则3
          goods-table-custom:
            # 这里使用自定义规则
            type: CLASS_BASED
            props:
              # 分片策略类型，支持STANDARD、COMPLEX或HINT（不区分大小写）
              strategy: STANDARD
              # 类路径,在resources/META-INF/services中也要配置SPI
              algorithmClassName: com.example.config.sharding.algorithm.StandardModuloShardingTableAlgorithm

        # 配置 分布式序列算法
        key-generators:
          # 内置算法，雪花算法（SNOWFLAKE），UUID（UUID），参考：https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen/
          snowflake:
            type: SNOWFLAKE
            props:
              # 工作机器唯一标识
              worker-id: 123
          # 自定义
          CUSTOM-GENERATOR-KEY:
            # 自定义类型，内置的类型有
            type: CUSTOM
            props:
              # 自定义属性
              redis-prfix: id:goods
              # 类路径,在resources.META-INF.services中也要配置SPI
              algorithmClassName: com.example.config.sharding.key.ShardingTableKeyGenerator
